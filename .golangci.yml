# Configuration for golangci-lint
# https://github.com/golangci/golangci-lint

# ------------------------------------------------------------------------------
# Analysis options.
# ------------------------------------------------------------------------------
run:
  # Default concurrency is a available CPU number.
  concurrency: 4

  # Timeout for analysis, e.g. 30s, 5m. Default: 1m.
  deadline: 1m

  # Exit code when at least one issue is found. Default: 1.
  issues-exit-code: 1

  # Whether to include test files or not. Default: true.
  tests: true

  # Global build tags which all linters will use. Default: empty list.
  #
  # >>> build-tags:
  # >>>   - example_tag

  # Directories to exclude from analysis.
  # Regexp can be used here; generated.*, regexp is applied on full path.
  # Default value is empty list, but next dirs are always skipped independently
  # from this option's value: vendor$, third_party$, testdata$, examples$, Godeps$, builtin$
  #
  skip-dirs:
    - .build
    - bazel-*

  # Files to exclude from analysis.
  # They will be analyzed, but the issues won't be reported. Default value is empty list.
  # Authors: "There is no need to include all autogenerated files, we confidently recognize
  # autogenerated files. If it's not please let us know."
  #
  # >>> skip-files:
  # >>>   - ".*\\.my\\.go$"
  # >>>   - lib/bad.go

  # Option to pass to "go list -mod={option}". From "go help modules":
  # If invoked with -mod=readonly, the go command is disallowed from the implicit
  # automatic updating of go.mod described above. Instead, it fails when any changes
  # to go.mod are needed. This setting is most useful to check that go.mod does not
  # need updates, such as in a continuous integration and testing system. If invoked
  # with -mod=vendor, the go command assumes that the vendor directory holds the
  # correct copies of dependencies and ignores the dependency descriptions in go.mod.
  #
  # >>> modules-download-mode: readonly|release|vendor


# ------------------------------------------------------------------------------
# Output settings.
# ------------------------------------------------------------------------------
output:
  # Format options. Default: "colored-line-number".
  # Options: colored-line-number|line-number|json|tab|checkstyle|code-climate.
  format: colored-line-number

  # Print lines of code with issues. Default: true.
  print-issued-lines: true

  # Print linter name at the end of issue output. Default: true.
  print-linter-name: true

# ------------------------------------------------------------------------------
# Linter switches
# ------------------------------------------------------------------------------
linters:
  enable:
    - megacheck
    - govet
    - gosimple
    - staticcheck
    - prealloc
    - maligned
  enable-all: false
  presets:
    - bugs
    - unused
  fast: false

# ------------------------------------------------------------------------------
# Issues settings
# ------------------------------------------------------------------------------
issues:
  # List of regexps of issue texts to exclude, empty list by default.
  # But independently from this option we use default exclude patterns,
  # it can be disabled by `exclude-use-default: false`. To list all
  # excluded by default patterns execute `golangci-lint run --help`
  # >>> exclude:
  # >>>   - example

  # Excluding configuration per-path, per-linter, per-text and per-source
  exclude-rules:
    # Exclude some linters from running on tests files.
    - path: _test\.go
      linters:
        - gocyclo
        - errcheck
        - dupl
        - gosec

    # Exclude known linters from partially hard-vendored code,
    # which is impossible to exclude via "nolint" comments.
    - path: internal/hmac/
      text: "weak cryptographic primitive"
      linters:
        - gosec

    # Exclude some static-check messages
    - linters:
        - staticcheck
      text: "SA9003:"

    # Exclude lll issues for long lines with go:generate
    - linters:
        - lll
      source: "^//go:generate "

  # Independently from option `exclude` we use default exclude patterns,
  # it can be disabled by this option. To list all
  # excluded by default patterns execute `golangci-lint run --help`.
  # Default value for this option is true.
  exclude-use-default: false

  # Maximum issues count per one linter. Set to 0 to disable. Default is 50.
  max-issues-per-linter: 0

  # Maximum count of issues with the same text. Set to 0 to disable. Default is 3.
  max-same-issues: 0

  # Show only new issues: if there are unstaged changes or untracked files,
  # only those changes are analyzed, else only changes in HEAD~ are analyzed.
  # It's a super-useful option for integration of golangci-lint into existing
  # large codebase. It's not practical to fix all existing issues at the moment
  # of integration: much better don't allow issues in new code.
  # Default is false.
  new: false

  # Show only new issues created after git revision `REV`
  #
  # >>> new-from-rev: REV

  # Show only new issues created in git patch with set file path.
  #
  # >>> new-from-patch: path/to/patch/file

# ------------------------------------------------------------------------------
# Linters settings.
# ------------------------------------------------------------------------------
linters-settings:
  # ****************************************************************************
  # https://github.com/kisielk/errcheck
  # Checks for unchecked errors.
  # ****************************************************************************
  errcheck:
    check-type-assertions: false # Report unchecked errors in type assertions, e.g. `a := b.(MyStruct)`. Default: false.
    check-blank: false # Report error assignments to blank identifiers, e.g. `num, _ := strconv.Atoi(numStr)`. Default: false.
    ignore: fmt:.*,io/ioutil:^Read.* # [DEPRECATED] comma-separated list of pairs (pkg:regex) to ignore. Default: "fmt:.*".
    # >>> exclude: /path/to/file.txt # path to file containing a list of funcs to exclude for checking.

  # ****************************************************************************
  # https://golang.org/cmd/vet/
  # Go vet
  # ****************************************************************************
  govet:
    check-shadowing: true # Report shadowed variables. Default: true.
    settings: # Per-analyzer settings.
      printf: # Analyzer name. Run `go tool vet help` to see all analyzers.
        funcs: # Run `go tool vet help printf` to see available settings for `printf` analyzer.
          - (github.com/golangci/golangci-lint/pkg/logutils.Log).Infof
          - (github.com/golangci/golangci-lint/pkg/logutils.Log).Warnf
          - (github.com/golangci/golangci-lint/pkg/logutils.Log).Errorf
          - (github.com/golangci/golangci-lint/pkg/logutils.Log).Fatalf

  # ****************************************************************************
  # https://github.com/golang/lint
  # Go lint
  # ****************************************************************************
  golint:
    min-confidence: 0.8 # Minimum confidence for reporting issues. Default: 0.8.

  # ****************************************************************************
  # https://golang.org/cmd/gofmt/
  # Go fmt
  # ****************************************************************************
  gofmt:
    simplify: true # Simplify code (gofmt with `-s` option). Default: true.

  # ****************************************************************************
  # https://godoc.org/golang.org/x/tools/cmd/goimports
  # Go imports
  # ****************************************************************************
  goimports:
    local-prefixes: github.com/org/project # Put imports with specified prefix after 3rd-party pkgs. Comma-separated list.

  # ****************************************************************************
  # https://github.com/alecthomas/gocyclo
  # Computes and checks the cyclomatic complexity of functions.
  # ****************************************************************************
  gocyclo:
    min-complexity: 10 # Minimum code complexity. Default: 30.

  # ****************************************************************************
  # https://github.com/mdempsky/maligned
  # Detects Go structs that would take less memory if their fields were sorted.
  # ****************************************************************************
  maligned:
    suggest-new: true # Print struct with more effective memory layout. Default: false.

  # ****************************************************************************
  # https://github.com/mibk/dupl
  # Finds code clones/duplications.
  # ****************************************************************************
  dupl:
    threshold: 100 # Tokens count to trigger an issue. Default: 150.

  # ****************************************************************************
  # https://github.com/jgautheron/goconst
  # Finds repeated strings that could be replaced by a constant.
  # ****************************************************************************
  goconst:
    min-len: 2 # Only report strings with the minimum given length. Default: 3.
    min-occurrences: 2 # Minimum occurrences count to trigger an issue. Default: 3.

  # ****************************************************************************
  # https://github.com/OpenPeeDeeP/depguard
  # Checks if package imports are in a list of acceptable packages.
  # ****************************************************************************
  depguard:
    list-type: blacklist # List type (blacklist|whitelist). Default: "blacklist".
    include-go-root: false # Check the list against the standard lib. Default: false.
    packages: # The package list itself.
      - github.com/jteeuwen/go-bindata

  # ****************************************************************************
  # https://github.com/client9/misspell
  # Correct commonly misspelled English words.
  # ****************************************************************************
  misspell:
    locale: US # Correct spellings using US or UK locale. Default is to use a neutral variety of English.
    ignore-words: # Exclude following words from spell-checking.
      - funcs
      - libcmd

  # ****************************************************************************
  # https://github.com/walle/lll
  # Enforces a max line length in code.
  # ****************************************************************************
  lll:
    line-length: 120 # Max length. '\t' is counted as 1 char, can be changed with tab-width option below. Default: 120.
    tab-width: 1 # Tab width in spaces. Default: 1.

  # ****************************************************************************
  # https://staticcheck.io/docs/checks#U1000
  # Reports unused identifiers.
  # ****************************************************************************
  unused:
    check-exported: false # Treat code as a program (not a library) and report unused exported identifiers. Default: false.

  # ****************************************************************************
  # https://github.com/mvdan/unparam
  # Finds unused function parameters and results.
  # ****************************************************************************
  unparam:
    check-exported: false # Inspect exported functions. Default: false.

  # ****************************************************************************
  # https://github.com/alexkohler/nakedret
  # Finds naked returns in functions greater than a specified function length.
  # ****************************************************************************
  nakedret:
    max-func-lines: 30 # Max func LOC before checking for naked returns. Default: 30.

  # ****************************************************************************
  # https://github.com/alexkohler/prealloc
  # Finds slice declarations that could potentially be preallocated.
  # ****************************************************************************
  prealloc:
    simple: true # Report only on simple loops that have no returns/breaks/continues/gotos. Default: true.
    range-loops: true # Report suggestions on range loops. Default: true.
    for-loops: false # Report suggestions on for loops. Default: false.

  # ****************************************************************************
  # https://go-critic.github.io/
  # https://github.com/go-critic/go-critic
  # Go critic.
  # ****************************************************************************
  gocritic:
    # Which checks should be enabled. Can't be combined with 'disabled-checks'. Default: list of stable checks.
    #
    # >>> enabled-checks:
    # >>>   - rangeValCopy
    #
    # Which checks should be disabled. Can't be combined with 'enabled-checks'. Default: empty list.
    #
    # >>> disabled-checks:
    # >>>   - regexpMust
    #
    # Enable checks by tags (presets). Default: empty list.
    enabled-tags:
      - performance
    settings: # Settings passed to gocritic.
      captLocal: # Must be valid enabled check name.
        paramsOnly: true
      rangeValCopy:
        sizeThreshold: 32