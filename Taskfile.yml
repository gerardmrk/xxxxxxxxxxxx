version: "2"

silent: true

vars:
  # INTERNAL USAGE.
  PLACEHOLDER: xxxxxxxxxxxx
  # docker volume for the DB container.
  DOCKER_DB_VOLUME: /usr/local/var/{{.PROJECT_NAME}}-db
  # docker compose command.
  DKRC_CMD: docker-compose -f ./build/docker-compose.yml
  # load envs command.
  LOAD_ENVS_CMD: "export $(grep -v '^#' .env | xargs)"

# expose these as env vars.
env:
  PROJECT_NAME: "{{.PROJECT_NAME}}"
  DOCKER_DB_VOLUME: "{{.DOCKER_DB_VOLUME}}"

tasks:
  # start loads all env vars defined in `.env`,
  # then runs all containers defined in `build/docker-compose.yml`.
  start:
    cmds:
      - |
        {{.LOAD_ENVS_CMD}}
        {{.DKRC_CMD}} up --build

  # start-bg is like `start`, but runs all containers in background mode. In
  # order to view logs from containers running in this mode, run `log-bg`.
  start-bg:
    cmds:
      - |
        {{.LOAD_ENVS_CMD}}
        {{.DKRC_CMD}} up -d --build

  # stop-bg stops all containers ran from calling `start-bg`, and unsets all
  # previously-loaded env-vars as defined in `.env`.
  stop-bg:
    cmds:
      - |
        {{.LOAD_ENVS_CMD}}
        {{.DKRC_CMD}} stop

  # log-bg outputs logs in --follow mode for all containers ran with `start-bg`.
  log-bg:
    cmds:
      - |
        {{.LOAD_ENVS_CMD}}
        {{.DKRC_CMD}} logs --follow

  # purge removes all resources generated by running either `start` or `start-bg`,
  # and force-stopping any containers that are still running.
  purge:
    cmds:
      - |
        {{.LOAD_ENVS_CMD}}
        {{.DKRC_CMD}} rm --force --stop -v
        rm -rf {{.DOCKER_DB_VOLUME}}

  # init initialises the workspace.
  init:
    cmds:
      - "{{.LOAD_ENVS_CMD}}"
      - sed -i '' 's/{{.PLACEHOLDER}}/{{.PROJECT_NAME}}/g' go.mod
      - go mod download
